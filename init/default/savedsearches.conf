[init_index_inv]
action.email.useNSSubject = 1
alert.track = 0
dispatch.earliest_time = -24h@h
dispatch.latest_time = now
display.general.timeRangePicker.show = 0
display.general.type = statistics
display.page.search.tab = statistics
display.visualizations.show = 0
request.ui_dispatch_app = init_new
request.ui_dispatch_view = search
search = | eventcount summarize=false index=* | where count>0| dedup index | eval from="99" | eval _time=now() | fields index, from, _time\
| append [| inputlookup init_lookup.csv  | eval from="1" | eval _time=date_changed ]\
| eval date_changed=if(isnull(date_changed),now(),date_changed)\
| eval active=if(isnull(active),"99",active)\
| eval comment=if(isnull(comment),"99",comment)\
| eval consumer=if(isnull(consumer),"99",consumer)\
| eval data_owner=if(isnull(data_owner),"99",data_owner)\
| eval data_owner_email=if(isnull(data_owner_email),"99",data_owner_email)\
| eval department=if(isnull(department),"99",department)\
| eval env=if(isnull(env),"99",env)\
| eval feeder=if(isnull(feeder),"99",feeder)\
| eval hf=if(isnull(hf),"hf",hf)\
| eval name=if(isnull(name),"99",name)\
| eval retention=if(isnull(retention),"ret",retention)\
| eval security=if(isnull(security),"99",security)\
| eval security_review=if(isnull(security_review),"99",security_review)\
| eval sourcetype=if(isnull(sourcetype),"sourcetype",sourcetype)\
| eval tech_owner=if(isnull(tech_owner),"99",tech_owner)\
| eval tech_owner_email=if(isnull(tech_owner_email),"99",tech_owner_email)\
| eval uf=if(isnull(uf),"uf",uf)\
| stats latest(_time) as _time, earliest(active) as active, earliest(consumer) as consumer, earliest(comment) as comment, earliest(date_changed) as date_changed,  earliest(data_owner) as data_owner, earliest(data_owner_email) as data_owner_email, earliest(department) as department, earliest(env) as env, earliest(feeder) as feeder, earliest(hf) as hf, earliest(name) as name, earliest(retention) as retention, earliest(security) as security, earliest(security_review) as security_review, earliest(sourcetype) as sourcetype, earliest(tech_owner) as tech_owner, earliest(tech_owner_email) as tech_owner_email, earliest(uf) as uf by index\
| outputlookup append=f init_lookup.csv

[Inventory Index]
action.email.useNSSubject = 1
alert.track = 0
description = Aktiva Index sorterade i ordning
dispatch.earliest_time = -24h@h
dispatch.latest_time = now
dispatchAs = user
display.general.timeRangePicker.show = 0
display.general.type = statistics
display.page.search.mode = verbose
display.page.search.tab = statistics
display.visualizations.show = 0
request.ui_dispatch_app = init
request.ui_dispatch_view = search
search = | inputlookup init_lookup.csv  | search active="1" | fields - date_changed, active | sort my_index

[Licensekostnad Splunk Index]
action.email = 1
action.email.message.report = The scheduled report '$name$' has run for Splunk PROD.
action.email.sendpdf = 1
action.email.sendresults = 1
action.email.subject.report = Splunk Report: $name$ - PROD
action.email.to = root@localhost.local
action.email.useNSSubject = 1
alert.track = 0
cron_schedule = 0 5 * * 1
description = Licensekostnad (406.422 SEK) per Index beräknat på senaste veckan.
dispatch.earliest_time = -1w@w
dispatch.latest_time = @w
display.general.timeRangePicker.show = 0
enableSched = 1
search = `init_index` type=splunk_license_usage source=License_per_host\
| eval Index=orig_index\
| eval hostCost=round(host_approximate_mb*(406.422/1024/30),2)\
| eval tot=round(host_approximate_mb,3)\
| stats sum(tot) as SizeMB, sum(hostCost) as SEK  by Index
disabled = 1

[Licensekostnad Splunk Index/månad]
action.email = 1
action.email.message.report = The scheduled report '$name$' has run for Splunk PROD.
action.email.sendpdf = 1
action.email.sendresults = 1
action.email.subject.report = Splunk Report: $name$ - PROD
action.email.to = root@localhost.local
action.email.useNSSubject = 1
alert.track = 0
cron_schedule = 0 4 1 * *
description = Licensekostnad (406.422 SEK) per Index beräknat på senaste månaden.
dispatch.earliest_time = -1mon@mon
dispatch.latest_time = @mon
display.general.timeRangePicker.show = 0
enableSched = 1
search = `init_index` type=splunk_license_usage source=License_per_host\
| eval Index=orig_index\
| eval hostCost=round(host_approximate_mb*(406.422/1024/30),2)\
| eval tot=round(host_approximate_mb,3)\
| stats sum(tot) as SizeMB, sum(hostCost) as SEK  by Index
disabled = 1

[License_per_sourcetype]
action.email.useNSSubject = 1
action.lookup = 1
action.lookup.filename = splunk_license_usage_index_sourcetype.csv
alert.track = 0
cron_schedule = 00 00 * * *
dispatch.earliest_time = -1d@d
dispatch.latest_time = @d
display.general.timeRangePicker.show = 0
display.general.type = statistics
display.page.search.tab = statistics
display.visualizations.show = 0
enableSched = 1
request.ui_dispatch_app = init
request.ui_dispatch_view = search
search = index=_internal source="*license_usage.log" sourcetype=splunkd | stats sum(eval(b/1024/1024)) as sourcetype_mb max(poolsz) as poolsz by idx st pool | eval index=if(idx=="default","main",idx)| rename st as sourcetype | fields - host idx | eventstats sum(sourcetype_mb) as license_usage_mb | outputlookup splunk_license_usage_index_sourcetype.csv

[License_per_host]
action.email.useNSSubject = 1
alert.track = 0
cron_schedule = 00 01 * * *
dispatch.earliest_time = -1d@d
dispatch.latest_time = @d
display.general.timeRangePicker.show = 0
display.general.type = statistics
display.page.search.tab = statistics
display.visualizations.show = 0
enableSched = 1
request.ui_dispatch_app = init
request.ui_dispatch_view = search
search = | tstats count where index=* by index host sourcetype\
| eventstats sum(count) as total_events\
| rename count as host_events\
| eval comment = "The generating search for the lookup file must run in the exact same timeframe, without modifications it can only run on yesterday as timespan"\
| lookup splunk_license_usage_index_sourcetype.csv index sourcetype OUTPUT license_usage_mb poolsz pool\
| eval comment = "Calculate average event size by sourcetype and use it in the license calculation"\
| join sourcetype [ | inputlookup splunk_license_usage_index_sourcetype.csv | stats sum(sourcetype_mb) as sourcetype_mb by sourcetype | join sourcetype [| tstats count by sourcetype] | eval event_size_b=((sourcetype_mb*1024*1024)/count) | fields - count sourcetype_mb ]\
| eval host_approximate_mb=((event_size_b*host_events)/(1024*1024))\
| eval comment = "Calculate the license percentage used by each host/sourcetype" \
| eval perc_of_poolsz=((host_approximate_mb*100)/((poolsz/(1024*1024)))) \
| eval comment = "Assume that the search runs past midnight for yesterday, set time to end of yesterday"\
| eval time = relative_time(now(),"-d@d")\
| eval _time = (time+86340)\
| fields - comment time\
| collect `init_index` testmode=false marker="type=splunk_license_usage"

[Fwd_type]
action.email.useNSSubject = 1
action.lookup = 1
action.lookup.filename = fwd_type.csv
alert.track = 0
cron_schedule = 0 4 * * *
dispatch.earliest_time = -7d@h
dispatch.latest_time = now
display.general.timeRangePicker.show = 0
display.general.type = statistics
display.page.search.tab = statistics
display.visualizations.show = 0
enableSched = 1
request.ui_dispatch_app = init_new
request.ui_dispatch_view = search
search = (fwdType=* group=tcpin_connections guid=*  index=_internal sourcetype=splunkd (connectionType=cooked OR connectionType=cookedSSL))\
| eval source_uri=((hostname . ":") . sourcePort), dest_uri=((host . ":") . destPort), connection=((source_uri . "->") . dest_uri)\
| stats values(fwdType) as fwdType, values(sourceIp) as sourceIp, latest(version) as version, values(os) as os, values(arch) as arch, dc(dest_uri) as dest_count, dc(connection) as connection_count, avg(tcp_KBps) as avg_tcp_kbps, avg(tcp_eps) as avg_tcp_eps by hostname, guid\
| eval avg_tcp_kbps=round(avg_tcp_kbps,2), avg_tcp_eps=round(avg_tcp_eps,2), fwdType=case((fwdType == "full"),"Heavy Forwarder",(fwdType == "uf"),"Universal Forwarder",(fwdType == "lwf"),"Light Forwarder",true(),fwdType)\
| rename hostname as Instance, fwdType as "Forwarder Type", sourceIp as IP, version as "Splunk Version", os as OS, arch as Architecture, guid as GUID, dest_count as "Receiver Count", connection_count as "Connection Count", avg_tcp_kbps as "Average KB/s", avg_tcp_eps as "Average Events/s"
